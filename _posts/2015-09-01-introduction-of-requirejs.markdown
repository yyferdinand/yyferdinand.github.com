---
layout:     post
title:      "RequireJS 的基础与入门"
subtitle:   "通过实例，简单介绍了 RequireJS，使它更简洁易懂"
date:       2015-09-01 23:33:00 
author:     "Fanxmistic"
header-img: "img/post/requirejs.jpg"
tags:
    - RequireJS
    - JavaScript 模块化
    - 前端
---

<div id="wmd-preview" class="wmd-preview"><div class="md-section-divider"></div><div class="md-section-divider"></div><h3 data-anchor-id="6kdw" id="一为什么要用-requirejs">一、为什么要用 RequireJS？</h3>
<p></p>
<pre data-anchor-id="59dw"><code>&lt;script src="1.js"&gt;&lt;/script&gt;
&lt;script src="2.js"&gt;&lt;/script&gt;
&lt;script src="3.js"&gt;&lt;/script&gt;
&lt;script src="4.js"&gt;&lt;/script&gt;
&lt;script src="5.js"&gt;&lt;/script&gt;
</code></pre><p data-anchor-id="uvsr">这样的写法有很大的缺点:</p><ol data-anchor-id="kwn7">
<li>加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；</li>
<li>由于 js 文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的 1.js 要在 2.js 的前面），依赖性最大的模块一定要放到最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</li>
</ol><p data-anchor-id="cd5a">为了解决上述问题，于是 <code>RequireJS</code> 诞生了。</p><div class="md-section-divider"></div><h3 data-anchor-id="02ch" id="二requirejs-的准备和加载">二、RequireJS 的准备和加载</h3><p data-anchor-id="oc85">第一步，你需要去 <a href="http://requirejs.org/docs/download.html" target="_blank">官方网站</a> 下载相应的 <code>RequireJS</code> 版本。</p><p data-anchor-id="d5aa">第二步，假定你把它放在 js 子目录下，那么</p><pre data-anchor-id="ggvq"><code>&lt;script src="js/require.js" defer async="true" data-main="js/main"&gt;&lt;/script&gt;
</code></pre><p data-anchor-id="9h2p">async 属性表明这个文件需要异步加载，避免网页失去响应。IE 不支持这个属性，只支持 defer，所以把 defer 也写上。当然，如果你是把它放在网页底部，那么就可以去掉 defer async 属性,如下：</p><pre data-anchor-id="rl6x"><code>&lt;script src="js/require.js" data-main="js/main"&gt;&lt;/script&gt;
</code></pre><p data-anchor-id="vumn">data-main 属性：指定网页程序的主模块。在上例中，就是 js 目录下面的 main.js，这个文件会第一个被 require.js 加载。由于 require.js 默认的文件后缀名是 js，所以可以把 main.js 简写成 main .</p><div class="md-section-divider"></div><h3 data-anchor-id="7ltu" id="三主模块mainjs的写法">三、主模块（main.js）的写法</h3><p data-anchor-id="9hwn">一般来说，主模块需要依赖于其它模块；如果没有依赖，也就没有用 RequireJS 的必要了。</p><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="2e2g"><ol class="linenums"><li class="L0"><code class="language-javascript"><span class="com">// main.js</span></code></li><li class="L1"><code class="language-javascript"></code></li><li class="L2"><code class="language-javascript"><span class="pln">　　require</span><span class="pun">([</span><span class="str">'moduleA'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'moduleB'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'moduleC'</span><span class="pun">],</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">moduleA</span><span class="pun">,</span><span class="pln"> moduleB</span><span class="pun">,</span><span class="pln"> moduleC</span><span class="pun">){</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">　　　　</span><span class="com">// doSomething;</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">　　</span><span class="pun">});</span></code></li></ol></pre><p data-anchor-id="lwic">require() 函数接受两个参数：</p><ul data-anchor-id="n65e">
<li>第一个参数：数组。表示所依赖的模块。</li>
<li>第二个参数：回调函数。当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。</li>
</ul><div class="md-section-divider"></div><h3 data-anchor-id="sxj5" id="四主模块mainjs的加载">四、主模块（main.js）的加载</h3><p data-anchor-id="qhj3">假定你的项目文件夹如下图：</p></p><img src="{{ site.baseurl }}/img/post/NewRepository.png"/><p data-anchor-id="ydmq">我们先来说一下 require.config() 方法，我们可以对模块的加载行为进行自定义。require.config() 就写在主模块（main.js）的头部。参数就是一个对象，这个对象的 paths 属性指定各个模块的加载路径，那么：</p><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="ss78"><ol class="linenums"><li class="L0"><code class="language-javascript"><span class="com">// main.js</span></code></li><li class="L1"><code class="language-javascript"></code></li><li class="L2"><code class="language-javascript"><span class="com">// 第一种写法</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">require</span><span class="pun">.</span><span class="pln">config</span><span class="pun">({</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">    baseUrl</span><span class="pun">:</span><span class="str">'js/app'</span><span class="pun">,</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">    paths</span><span class="pun">:{</span></code></li><li class="L6"><code class="language-javascript"><span class="pln">        </span><span class="str">"a"</span><span class="pun">:</span><span class="str">"aDemo"</span><span class="pun">,</span></code></li><li class="L7"><code class="language-javascript"><span class="pln">        </span><span class="str">"b"</span><span class="pun">:</span><span class="str">"bDemo"</span></code></li><li class="L8"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-javascript"><span class="pun">});</span></code></li><li class="L0"><code class="language-javascript"></code></li><li class="L1"><code class="language-javascript"><span class="com">// 第二种写法</span></code></li><li class="L2"><code class="language-javascript"><span class="pln">require</span><span class="pun">.</span><span class="pln">config</span><span class="pun">({</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">    paths</span><span class="pun">:{</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">        </span><span class="str">"a"</span><span class="pun">:</span><span class="str">"js/app/aDemo"</span><span class="pun">,</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">        </span><span class="str">"b"</span><span class="pun">:</span><span class="str">"js/app/bDemo"</span></code></li><li class="L6"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-javascript"><span class="pun">});</span></code></li><li class="L8"><code class="language-javascript"></code></li><li class="L9"><code class="language-javascript"><span class="com">// 以上两种写法任选其一即可,然后</span></code></li><li class="L0"><code class="language-javascript"></code></li><li class="L1"><code class="language-javascript"><span class="pln">require</span><span class="pun">([</span><span class="str">'a'</span><span class="pun">,</span><span class="str">'b'</span><span class="pun">],</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">a</span><span class="pun">,</span><span class="pln">b</span><span class="pun">){</span></code></li><li class="L2"><code class="language-javascript"><span class="pln">    </span><span class="com">// doSomething;</span></code></li><li class="L3"><code class="language-javascript"><span class="pun">})</span></code></li></ol></pre><div class="md-section-divider"></div><h3 data-anchor-id="85ub" id="五amd-模块的写法">五、AMD 模块的写法</h3><p data-anchor-id="gyb5">require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。具体来说，就是模块必须采用特定的 define() 函数来定义。</p><p data-anchor-id="wzih">假定 aDemo.js 依赖于 cDemo.js , bDemo.js 不依赖任何其它模块。编写如下代码：</p><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="3l61"><ol class="linenums"><li class="L0"><code class="language-javascript"><span class="com">// cDemo.js</span></code></li><li class="L1"><code class="language-javascript"></code></li><li class="L2"><code class="language-javascript"><span class="pln">define</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">        name</span><span class="pun">:</span><span class="str">'Fanxmistic'</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-javascript"><span class="pun">})</span></code></li></ol></pre><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="iutm"><ol class="linenums"><li class="L0"><code class="language-javascript"><span class="com">// aDemo.js</span></code></li><li class="L1"><code class="language-javascript"></code></li><li class="L2"><code class="language-javascript"><span class="pln">require</span><span class="pun">.</span><span class="pln">config</span><span class="pun">({</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">    baseUrl</span><span class="pun">:</span><span class="str">'js/app'</span><span class="pun">,</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">    paths</span><span class="pun">:{</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">        </span><span class="str">"c"</span><span class="pun">:</span><span class="str">"cDemo"</span></code></li><li class="L6"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-javascript"><span class="pun">})</span></code></li><li class="L8"><code class="language-javascript"></code></li><li class="L9"><code class="language-javascript"></code></li><li class="L0"><code class="language-javascript"><span class="pln">define</span><span class="pun">([</span><span class="str">'c'</span><span class="pun">],</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">c</span><span class="pun">){</span></code></li><li class="L1"><code class="language-javascript"><span class="pln">    </span><span class="kwd">return</span><span class="pun">{</span></code></li><li class="L2"><code class="language-javascript"><span class="pln">        color</span><span class="pun">:</span><span class="str">'black'</span><span class="pun">,</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">        size</span><span class="pun">:</span><span class="str">'unsize'</span><span class="pun">,</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">        c</span><span class="pun">:</span><span class="pln">c</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-javascript"><span class="pun">});</span></code></li></ol></pre><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="k3pf"><ol class="linenums"><li class="L0"><code class="language-javascript"><span class="com">// bDemo.js</span></code></li><li class="L1"><code class="language-javascript"></code></li><li class="L2"><code class="language-javascript"><span class="pln">define</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">(){</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> add </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,</span><span class="pln">y</span><span class="pun">){</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> x </span><span class="pun">+</span><span class="pln"> y</span><span class="pun">;</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-javascript"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> subtract </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,</span><span class="pln">y</span><span class="pun">){</span></code></li><li class="L7"><code class="language-javascript"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> x </span><span class="pun">-</span><span class="pln"> y</span><span class="pun">;</span></code></li><li class="L8"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-javascript"></code></li><li class="L0"><code class="language-javascript"><span class="pln">    </span><span class="kwd">return</span><span class="pun">{</span></code></li><li class="L1"><code class="language-javascript"><span class="pln">        add</span><span class="pun">:</span><span class="pln">add</span><span class="pun">,</span></code></li><li class="L2"><code class="language-javascript"><span class="pln">        subtract</span><span class="pun">:</span><span class="pln">subtract</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-javascript"><span class="pun">})</span></code></li></ol></pre><div class="md-section-divider"></div><h3 data-anchor-id="yqxg" id="六完善主模块mainjs">六、完善主模块（main.js）</h3><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="ht4c"><ol class="linenums"><li class="L0"><code class="language-javascript"><span class="com">// main.js</span></code></li><li class="L1"><code class="language-javascript"></code></li><li class="L2"><code class="language-javascript"><span class="pln">require</span><span class="pun">.</span><span class="pln">config</span><span class="pun">({</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">    baseUrl</span><span class="pun">:</span><span class="str">'js/app'</span><span class="pun">,</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">    paths</span><span class="pun">:{</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">        </span><span class="str">"a"</span><span class="pun">:</span><span class="str">"aDemo"</span><span class="pun">,</span></code></li><li class="L6"><code class="language-javascript"><span class="pln">        </span><span class="str">"b"</span><span class="pun">:</span><span class="str">"bDemo"</span></code></li><li class="L7"><code class="language-javascript"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-javascript"><span class="pun">});</span></code></li><li class="L9"><code class="language-javascript"></code></li><li class="L0"><code class="language-javascript"><span class="pln">require</span><span class="pun">([</span><span class="str">'a'</span><span class="pun">,</span><span class="str">'b'</span><span class="pun">],</span><span class="kwd">function</span><span class="pun">(</span><span class="pln">a</span><span class="pun">,</span><span class="pln">b</span><span class="pun">){</span></code></li><li class="L1"><code class="language-javascript"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">b</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="lit">4</span><span class="pun">,</span><span class="lit">5</span><span class="pun">));</span></code></li><li class="L2"><code class="language-javascript"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">b</span><span class="pun">.</span><span class="pln">subtract</span><span class="pun">(</span><span class="lit">11</span><span class="pun">,</span><span class="lit">22</span><span class="pun">));</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">a</span><span class="pun">);</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">a</span><span class="pun">.</span><span class="pln">c</span><span class="pun">.</span><span class="pln">name</span><span class="pun">);</span></code></li><li class="L5"><code class="language-javascript"><span class="pun">})</span></code></li></ol></pre><p data-anchor-id="fbux">审查元素，得到下图：    </p><p><img src="{{ site.baseurl }}/img/post/requirejs_output.png"/></p><div class="md-section-divider"></div><h3 data-anchor-id="c3xg" id="七加载非规范的模块">七、加载非规范的模块</h3><p data-anchor-id="l9od">理论上，require.js 加载的模块，必须是按照 AMD 规范、用 define() 函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如jQuery）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？</p><p data-anchor-id="rr5l">回答是可以的。</p><p data-anchor-id="9930">这样的模块在用 require() 加载之前，要先用 require.config() 方法，定义它们的一些特征。举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。</p><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="fcaq"><ol class="linenums"><li class="L0"><code class="language-javascript"><span class="pln">require</span><span class="pun">.</span><span class="pln">config</span><span class="pun">({</span></code></li><li class="L1"><code class="language-javascript"><span class="pln">　　　　shim</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-javascript"><span class="pln">　　　　　　</span><span class="str">'underscore'</span><span class="pun">:{</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">　　　　　　　　exports</span><span class="pun">:</span><span class="pln"> </span><span class="str">'_'</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">　　　　　　</span><span class="pun">},</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">　　　　　　</span><span class="str">'backbone'</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-javascript"><span class="pln">　　　　　　　　deps</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'underscore'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'jquery'</span><span class="pun">],</span></code></li><li class="L7"><code class="language-javascript"><span class="pln">　　　　　　　　exports</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Backbone'</span></code></li><li class="L8"><code class="language-javascript"><span class="pln">　　　　　　</span><span class="pun">}</span></code></li><li class="L9"><code class="language-javascript"><span class="pln">　　　　</span><span class="pun">}</span></code></li><li class="L0"><code class="language-javascript"><span class="pln">　　</span><span class="pun">});</span></code></li></ol></pre><p data-anchor-id="wlzg">require.config() 接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义两个属性：</p><ol data-anchor-id="581q">
<li>exports 值（输出的变量名），表明这个模块外部调用时的名称；</li>
<li>deps 数组，表明该模块的依赖性。</li>
</ol><p data-anchor-id="vr5q">比如，jQuery的插件可以这样定义：</p><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="mgva"><ol class="linenums"><li class="L0"><code class="language-javascript"><span class="pln">require</span><span class="pun">.</span><span class="pln">config</span><span class="pun">({</span></code></li><li class="L1"><code class="language-javascript"><span class="pln">　　　　shim</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-javascript"><span class="pln">　　　      </span><span class="str">'jquery.scroll'</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-javascript"><span class="pln">　　　　　      deps</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'jquery'</span><span class="pun">],</span></code></li><li class="L4"><code class="language-javascript"><span class="pln">　　　　　      exports</span><span class="pun">:</span><span class="pln"> </span><span class="str">'jQuery.fn.scroll'</span></code></li><li class="L5"><code class="language-javascript"><span class="pln">　　　      </span><span class="pun">}</span></code></li><li class="L6"><code class="language-javascript"><span class="pln">　　    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-javascript"><span class="pln">　　</span><span class="pun">});</span></code></li></ol></pre><div class="md-section-divider"></div><h3 data-anchor-id="98ov" id="八小结">八、小结</h3><p data-anchor-id="pdqq">特别鸣谢 <a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank">阮一峰的网络日志</a> 。</p><p data-anchor-id="700s">本文简单介绍了 RequireJS 的基础与入门，更多知识可查询 <a href="http://www.requirejs.cn" target="_blank"> RequireJS 中文网</a>。</p></div>